Commit 9

import tkinter as tk
from tkinter import ttk, scrolledtext
import requests
import socket
from urllib.parse import urlparse
from tkinter import messagebox
from ttkthemes import ThemedTk

class WebScraperGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Web Scraper with IP Resolution")
        self.root.geometry("900x700")
        
        # Apply modern theme
        self.style = ttk.Style()
        
        # Configure styles
        self.style.configure('Main.TFrame', background='#f0f0f0')
        self.style.configure('Title.TLabel', 
                           font=('Helvetica', 14, 'bold'),
                           background='#2c3e50',
                           foreground='white',
                           padding=10)
        self.style.configure('Label.TLabel',
                           font=('Helvetica', 10),
                           background='#f0f0f0',
                           padding=5)
        self.style.configure('Custom.TButton',
                           font=('Helvetica', 10),
                           background='#3498db',
                           foreground='white',
                           padding=10)
        
        # Create header
        self.header_frame = ttk.Frame(self.root, style='Main.TFrame')
        self.header_frame.grid(row=0, column=0, sticky='ew')
        ttk.Label(self.header_frame,
                 text="Web Scraper & IP Resolution Tool",
                 style='Title.TLabel').grid(row=0, column=0, columnspan=4, sticky='ew')
        
        # Create main frame
        self.main_frame = ttk.Frame(self.root, style='Main.TFrame', padding="20")
        self.main_frame.grid(row=1, column=0, sticky='nsew')
        
        # URL Input Frame
        self.url_frame = ttk.Frame(self.main_frame, style='Main.TFrame')
        self.url_frame.grid(row=0, column=0, columnspan=4, pady=10, sticky='ew')
        
        ttk.Label(self.url_frame,
                 text="Enter URL:",
                 style='Label.TLabel').grid(row=0, column=0, sticky='w')
        
        # Styled Entry
        self.url_entry = ttk.Entry(self.url_frame,
                                 width=60,
                                 font=('Helvetica', 10))
        self.url_entry.grid(row=0, column=1, padx=5, sticky='w')
        
        # Button Frame
        self.button_frame = ttk.Frame(self.main_frame, style='Main.TFrame')
        self.button_frame.grid(row=1, column=0, columnspan=4, pady=10)
        
        # Styled Buttons
        self.fetch_button = ttk.Button(self.button_frame,
                                    text="Fetch Data",
                                    command=self.fetch_data,
                                    style='Custom.TButton')
        self.fetch_button.grid(row=0, column=0, padx=5)
        
        self.clear_button = ttk.Button(self.button_frame,
                                    text="Clear",
                                    command=self.clear_data,
                                    style='Custom.TButton')
        self.clear_button.grid(row=0, column=1, padx=5)
        
        # IP Information Frame
        self.ip_frame = ttk.Frame(self.main_frame, style='Main.TFrame')
        self.ip_frame.grid(row=2, column=0, columnspan=4, pady=10, sticky='ew')
        
        ttk.Label(self.ip_frame,
                 text="IP Information:",
                 style='Label.TLabel').grid(row=0, column=0, sticky='w')
        
        # Styled IP Text
        self.ip_text = scrolledtext.ScrolledText(
            self.ip_frame,
            width=70,
            height=5,
            font=('Consolas', 10),
            bg='#ffffff',
            fg='#2c3e50'
        )
        self.ip_text.grid(row=1, column=0, pady=5)
        
        # HTML Content Frame
        self.html_frame = ttk.Frame(self.main_frame, style='Main.TFrame')
        self.html_frame.grid(row=3, column=0, columnspan=4, pady=10, sticky='ew')
        
        ttk.Label(self.html_frame,
                 text="HTML Content:",
                 style='Label.TLabel').grid(row=0, column=0, sticky='w')
        
        # Styled HTML Text
        self.html_text = scrolledtext.ScrolledText(
            self.html_frame,
            width=70,
            height=20,
            font=('Consolas', 10),
            bg='#ffffff',
            fg='#2c3e50'
        )
        self.html_text.grid(row=1, column=0, pady=5)
        
        # Configure grid weights
        self.root.grid_rowconfigure(1, weight=1)
        self.root.grid_columnconfigure(0, weight=1)
        
        # Add hover effects
        self.bind_hover_events()

    def bind_hover_events(self):
        def on_enter(e):
            e.widget['style'] = 'Custom.TButton.hover'
        
        def on_leave(e):
            e.widget['style'] = 'Custom.TButton'
        
        self.style.configure('Custom.TButton.hover',
                           background='#2980b9',
                           foreground='white')
        
        self.fetch_button.bind('<Enter>', on_enter)
        self.fetch_button.bind('<Leave>', on_leave)
        self.clear_button.bind('<Enter>', on_enter)
        self.clear_button.bind('<Leave>', on_leave)

    def get_ip_info(self, url):
        try:
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            if not domain:
                raise ValueError("Invalid URL format")
                
            # Remove port number if present
            domain = domain.split(':')[0]
            
            # Get IP address
            ip_address = socket.gethostbyname(domain)
            
            # Get additional IP information
            try:
                host_info = socket.gethostbyaddr(ip_address)
                return f"Domain: {domain}\nIP Address: {ip_address}\nHostname: {host_info[0]}\nAliases: {', '.join(host_info[1])}"
            except socket.herror:
                return f"Domain: {domain}\nIP Address: {ip_address}"
                
        except socket.gaierror:
            raise Exception("Could not resolve IP address")
        except ValueError as e:
            raise Exception(str(e))

    def fetch_data(self):
        url = self.url_entry.get().strip()
        
        # Clear previous data
        self.ip_text.delete(1.0, tk.END)
        self.html_text.delete(1.0, tk.END)
        
        if not url:
            messagebox.showerror("Error", "Please enter a URL")
            return
            
        # Add http:// if no protocol specified
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url
            
        try:
            # Get IP information
            ip_info = self.get_ip_info(url)
            self.ip_text.insert(tk.END, ip_info)
            
            # Fetch HTML content
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            self.html_text.insert(tk.END, response.text)
            
        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Failed to fetch data: {str(e)}")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def clear_data(self):
        self.url_entry.delete(0, tk.END)
        self.ip_text.delete(1.0, tk.END)
        self.html_text.delete(1.0, tk.END)

def main():
    root = ThemedTk(theme="arc")  # Using the 'arc' theme from ttkthemes
    app = WebScraperGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()